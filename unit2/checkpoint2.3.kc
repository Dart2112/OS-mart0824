import "string"

#pragma link("mega65hyper.ld")

const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

char[] MESSAGE = "checkpoint 2.3 by mart0824";

void main(){
}

void exit_hypervisor() {
  *(unsigned char *)$D67F = $01;
}

void syscall1(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall2(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall3(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall4(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall5(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall6(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall7(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall8(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall9(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall10(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall11(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void secureEntr(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void secureExit(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall14(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall15(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall16(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall17(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall18(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall19(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall20(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall21(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall22(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall23(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall24(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall25(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall26(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall27(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall28(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall29(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall30(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall31(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall32(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall33(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall34(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall35(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall36(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall37(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall38(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall39(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall40(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall41(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall42(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall43(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall44(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall45(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall46(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall47(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall48(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall49(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall50(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall51(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall52(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall53(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall54(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall55(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall56(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall57(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall58(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall59(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall60(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall61(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall62(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall63(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void syscall64(){
	*(SCREEN+79) = '>';
	exit_hypervisor();
}

void reset(){
  *VIC_MEMORY = 0x14;
  memset(SCREEN, ' ', 40*25);
  memset(COLS, WHITE, 40*25);
  char* sc = SCREEN+40;
  char* msg = MESSAGE;
  while(*msg){
    *sc++ = *msg++;
  }
  while(true) {
    if(*RASTER==54 || *RASTER==66) {
      *BGCOL = WHITE;
    }else{
      *BGCOL = BLACK;
    }
  }
}

void restoreKey(){
  exit_hypervisor();
}

void altTabKey(){
  exit_hypervisor();
}

void vF011Rd(){
  exit_hypervisor();
}

void vF011Wr(){
  exit_hypervisor();
}

void reserved(){
  exit_hypervisor();
}

void CpuKill(){
  exit_hypervisor();
}

void undefined_trap(){
  exit_hypervisor();
}

#pragma data_seg(Syscall)

struct SysCall {
	char xjmp;
	void()* syscall;
	char xnop;
};

const char JMP = 0x4c;
const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {
	{ JMP, &syscall1, NOP},
	{ JMP, &syscall2, NOP},
	{ JMP, &syscall3, NOP},
	{ JMP, &syscall4, NOP},
	{ JMP, &syscall5, NOP},
	{ JMP, &syscall6, NOP},
	{ JMP, &syscall7, NOP},
	{ JMP, &syscall8, NOP},
	{ JMP, &syscall9, NOP},
	{ JMP, &syscall10, NOP},
	{ JMP, &syscall11, NOP},
	{ JMP, &secureEntr, NOP},
	{ JMP, &secureExit, NOP},
	{ JMP, &syscall14, NOP},
	{ JMP, &syscall15, NOP},
	{ JMP, &syscall16, NOP},
	{ JMP, &syscall17, NOP},
	{ JMP, &syscall18, NOP},
	{ JMP, &syscall19, NOP},
	{ JMP, &syscall20, NOP},
	{ JMP, &syscall21, NOP},
	{ JMP, &syscall22, NOP},
	{ JMP, &syscall23, NOP},
	{ JMP, &syscall24, NOP},
	{ JMP, &syscall25, NOP},
	{ JMP, &syscall26, NOP},
	{ JMP, &syscall27, NOP},
	{ JMP, &syscall28, NOP},
	{ JMP, &syscall29, NOP},
	{ JMP, &syscall30, NOP},
	{ JMP, &syscall31, NOP},
	{ JMP, &syscall32, NOP},
	{ JMP, &syscall33, NOP},
	{ JMP, &syscall34, NOP},
	{ JMP, &syscall35, NOP},
	{ JMP, &syscall36, NOP},
	{ JMP, &syscall37, NOP},
	{ JMP, &syscall38, NOP},
	{ JMP, &syscall39, NOP},
	{ JMP, &syscall40, NOP},
	{ JMP, &syscall41, NOP},
	{ JMP, &syscall42, NOP},
	{ JMP, &syscall43, NOP},
	{ JMP, &syscall44, NOP},
	{ JMP, &syscall45, NOP},
	{ JMP, &syscall46, NOP},
	{ JMP, &syscall47, NOP},
	{ JMP, &syscall48, NOP},
	{ JMP, &syscall49, NOP},
	{ JMP, &syscall50, NOP},
	{ JMP, &syscall51, NOP},
	{ JMP, &syscall52, NOP},
	{ JMP, &syscall53, NOP},
	{ JMP, &syscall54, NOP},
	{ JMP, &syscall55, NOP},
	{ JMP, &syscall56, NOP},
	{ JMP, &syscall57, NOP},
	{ JMP, &syscall58, NOP},
	{ JMP, &syscall59, NOP},
	{ JMP, &syscall60, NOP},
	{ JMP, &syscall61, NOP},
	{ JMP, &syscall62, NOP},
	{ JMP, &syscall63, NOP},
	{ JMP, &syscall64, NOP}
};

export align(0x100) struct SysCall[] TRAPS = {
  { JMP, &reset, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &restoreKey, NOP},
  { JMP, &altTabKey, NOP},
  { JMP, &vF011Rd, NOP},
  { JMP, &vF011Wr, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &undefined_trap, NOP},
  { JMP, &CpuKill, NOP}
};
